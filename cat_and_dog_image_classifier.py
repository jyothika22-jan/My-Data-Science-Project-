# -*- coding: utf-8 -*-
"""Cat and Dog Image Classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10OjTHn0VWxSL8lkSJw1cetvJ50O3XTB4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import cv2
import tensorflow as tf
from PIL import Image
import os
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from keras.utils import to_categorical
from keras.models import Sequential, load_model
from keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout
from keras.applications import VGG16
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping,ReduceLROnPlateau
from keras.preprocessing.image import ImageDataGenerator
import zipfile

from google.colab import drive
drive.mount('/content/drive')

drive_path = '/content/drive/MyDrive/'

zip_file_path = '/content/drive/MyDrive/cat and dog data.zip'

destination_folder = '/content/cat_and_dog'

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(destination_folder)

data_path = os.path.join(destination_folder, 'training_set/training_set')

destination_folder = "/content/cat_and_dog/training_set/training_set"
data = []
labels = []

# Load images and labels
classes = ['cats', 'dogs']

import numpy as np
from PIL import Image
import os

destination_folder = "/content/cat_and_dog/training_set/training_set"
data = []
labels = []

classes = ['cats', 'dogs']  # Assuming the folder names are 'cats' and 'dogs'

for label, cls in enumerate(classes):
    path = os.path.join(destination_folder, cls)
    for image_name in os.listdir(path):
        image_path = os.path.join(path, image_name)
        # Check if the path is a file to skip directories like .ipynb_checkpoints
        if os.path.isfile(image_path):
            try:
                image = Image.open(image_path).resize((64, 64))
                image = np.array(image) / 255.0  # Normalize pixel values
                data.append(image)
                labels.append(label)
            except Exception as e:
                print(f"Error loading image {image_name}: {e}")

# Convert lists to numpy arrays
data = np.array(data)
labels = np.array(labels)

print(f"Loaded {len(data)} images.")

data = np.array(data)
labels = np.array(labels)
print(data)
print(labels)

X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# One-hot encode the labels
y_train_one_hot = to_categorical(y_train, num_classes=len(classes))
y_test_one_hot = to_categorical(y_test, num_classes=len(classes))

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPool2D(2, 2),
    Dropout(0.25),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPool2D(2, 2),
    Dropout(0.25),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(len(classes), activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

epochs = 15
history = model.fit(X_train, y_train_one_hot, batch_size=32, epochs=epochs, validation_data=(X_test, y_test_one_hot))

model.save("cat_and_dog_model.h5")

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

